package util;

import java.util.ArrayList;
import java.util.HashSet;

public class Heu {
	public static void main(String[] args) {
		String identifierName = "getBridgeContext";
		String comment = "";
		System.out.println(canHeuExpand(identifierName, comment));
	}
	public static boolean canHeuExpand(String identifierName, String comment) {
		boolean result = true;
		ArrayList<String> parts = Util.split(identifierName);
		parts = removePrepositions(parts);
		String[] words = parseComment(comment);
		HashSet<String> stemsWords = getStemsWords(words);
		for (String part : parts) {
			if (!in(part, words)) {
				// failed token
				result = false;
				break;
			}
		}
		if (result == false && identifierName.contains("get")) {
			result = true;
			identifierName = identifierName.replace("get", "return");
			ArrayList<String> parts2 = Util.split(identifierName);
			for (String part : parts2) {
				if (!in(part, words)) {
					result = false;
					break;
				}
			}
		}
		return result;
	}
	private static HashSet<String> getStemsWords(String[] words) {
		HashSet<String> result = new HashSet<>();
		for (String word : words) {
			HashSet<String> stems = Util.findStem(word);
			result.addAll(stems);
		}
		return result;
	}
	private static boolean forFailedToken(String token, String[] words) {
		boolean result = false;
		if (Dic.isInDict(token)) {
			HashSet<String> stems = Util.findStem(token);
			for (String stem : stems) {
				for (String word : words) {
					for (String stemWord : Util.findStem(word)) {
						if (!Util.isSequence(stemWord, sequence))) {
						}
					}
				}
					
			}
		} else {
			result = false;
			break;
		}
		
		
		return result;
	}
	private static ArrayList<String> removePrepositions(ArrayList<String> parts) {
		String sentence = String.join(" ", parts);
		return Util.removePrepositions(sentence);
	}
	private static boolean in(String part, String[] words) {
		for (String word : words) {
			if (Util.isSequence(word, part)) {
				return true;
			}
			if (part.charAt(part.length()-1) == 's' && Util.isSequence(word, part.substring(0, part.length()-1))) {
				return true;
			}
		}
		return false;
	}

	private static String[] parseComment(String comment) {
		String result = "";
		char[] chars = comment.toCharArray();
		
		for (int i = 0; i < chars.length; i++) {
			if (Util.isLetter(chars[i])) {
				result += chars[i];
			} else {
				result += ' ';
			}
		}
		while (result.contains("  ")) {
			result = result.replace("  ", " ");
		}
		if (result.trim().equals("")) {
			return new String[]{""};
		}
		ArrayList<String> arrayList = new ArrayList<>();
		for (String string : result.trim().split(" ")) {
			arrayList.addAll(Util.split(string));
		}
		String[] temp = new String[arrayList.size()];
		for (int i = 0; i < arrayList.size(); i++) {
			temp[i] = arrayList.get(i);
		}
		
		return temp;
	}
}


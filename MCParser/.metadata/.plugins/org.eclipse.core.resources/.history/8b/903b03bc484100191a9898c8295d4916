package huyamin.main;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.util.ArrayList;

import org.eclipse.core.commands.AbstractHandler;
import org.eclipse.core.commands.ExecutionEvent;
import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.jdt.core.ICompilationUnit;
import org.eclipse.jdt.core.IJavaProject;
import org.eclipse.jdt.core.IPackageFragment;
import org.eclipse.jdt.core.JavaCore;
import org.eclipse.jdt.core.JavaModelException;
import org.eclipse.jdt.core.dom.AST;
import org.eclipse.jdt.core.dom.ASTParser;
import org.eclipse.jdt.core.dom.Comment;
import org.eclipse.jdt.core.dom.CompilationUnit;

import entity.MyMethod;
import util.Config;
import util.Heu;
import entity.MethodCommentPair;
import entity.MyComment;
import visitor.MyCommentVisitor;
import visitor.MyMethodVisitor;

public class Parse extends AbstractHandler {
	private static ASTParser astParser;
	private ArrayList<MethodCommentPair> methodCommentPairs = new ArrayList<>();

	static {
		astParser = ASTParser.newParser(AST.JLS8);  
		astParser.setKind(ASTParser.K_COMPILATION_UNIT);
		astParser.setResolveBindings(true);
		astParser.setBindingsRecovery(true);
	}
	
	@Override
	public Object execute(ExecutionEvent event) throws ExecutionException {
		String commandID = event.getCommand().getId();
		try {
			handleCommand(commandID);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		return null;
	}
	
	private void handleCommand(String commandID) throws FileNotFoundException {
		if (commandID.equals("ParseCode.commands.sampleCommand")) {
			IProject[] projects = ResourcesPlugin.getWorkspace().getRoot().getProjects();
			for (int i = 0; i < projects.length; i++) {
				IProject project = projects[i];
				IJavaProject javaProject = JavaCore.create(project);
				try {
					IPackageFragment[] fragments = javaProject.getPackageFragments();
					for (int j = 0; j < fragments.length; j++) {
						IPackageFragment fragment = fragments[j];
						ICompilationUnit[] compilationUnits = fragment.getCompilationUnits();
						for (int k = 0; k < compilationUnits.length; k++) {
							ICompilationUnit compilationUnit = compilationUnits[k];
							parseOneFile(compilationUnit);
						}
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
		printMethodCommentPairs(methodCommentPairs);
	}
	
	private void parseOneFile(ICompilationUnit compilationUnit) throws JavaModelException {
		IResource iResource = compilationUnit.getUnderlyingResource();
		String path = null;
		if (iResource.getType() == IResource.FILE) {
			IFile ifile = (IFile) iResource;
		    path = ifile.getRawLocation().toString();
		}
		
		astParser.setSource(compilationUnit);  
		CompilationUnit unit = (CompilationUnit) (astParser.createAST(null));
		
		MyMethodVisitor newMethodVisitor = new MyMethodVisitor(unit);
		unit.accept(newMethodVisitor);

		for (Object object: unit.getCommentList()) {
			Comment comment = (Comment) object;
			MyCommentVisitor newCommentVisitor = new MyCommentVisitor(unit, compilationUnit.getSource());
			comment.accept(newCommentVisitor);
			if (!newCommentVisitor.comment.contentToString().equals("")) {
				MyMethod method = matchMethodComment(newMethodVisitor.methods, newCommentVisitor.comment, methodCommentPairs);
				if (method != null) {
					MethodCommentPair methodCommentPair = new MethodCommentPair(path, method, newCommentVisitor.comment);
					methodCommentPairs.add(methodCommentPair);
				}
			}
		}
	}
	
	private void printMethodCommentPairs(ArrayList<MethodCommentPair> methodCommentPairs) throws FileNotFoundException {
		System.setOut(new PrintStream(new File(Config.outFile)));
		for (MethodCommentPair methodCommentPair : methodCommentPairs) {
			boolean can = Heu.canHeuExpand(methodCommentPair.getMethod().getName(), methodCommentPair.getComment().toString());
			if (can) {
				System.out.println(methodCommentPair + "\t" + 1);
			} else {
				System.out.println(methodCommentPair + "\t" + 0);				
			}
		}
		System.err.println("end");
	}
	
	private MyMethod matchMethodComment(ArrayList<MyMethod> methods, MyComment comment, ArrayList<MethodCommentPair> methodCommentPairs) {
		for (MyMethod method : methods) {
			if (comment.getEndLine() + 1 == method.getLine()) {
				return method;
			}
		}
		return null;
	}
}

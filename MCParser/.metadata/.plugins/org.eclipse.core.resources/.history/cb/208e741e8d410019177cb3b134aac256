package huyamin.main;

import java.io.IOException;
import java.io.StringReader;
import java.util.*;

import edu.stanford.nlp.ling.CoreLabel;
import edu.stanford.nlp.ling.HasWord;
import edu.stanford.nlp.ling.Label;
import edu.stanford.nlp.ling.TaggedWord;
import edu.stanford.nlp.ling.Word;
import edu.stanford.nlp.process.DocumentPreprocessor;
import edu.stanford.nlp.process.Tokenizer;
import edu.stanford.nlp.trees.*;
import edu.stanford.nlp.parser.lexparser.LexicalizedParser;

public class ParserDemo2 {

	/** This example shows a few more ways of providing input to a parser.
	 *
	 *  Usage: ParserDemo2 [grammar [textFile]]
	 */
	public static void main(String[] args) throws IOException {
		String grammar = args.length > 0 ? args[0] : "edu/stanford/nlp/models/lexparser/englishPCFG.ser.gz";
		String[] options = { "-maxLength", "80", "-retainTmpSubcategories" };
		LexicalizedParser lp = LexicalizedParser.loadModel(grammar, options);
		TreebankLanguagePack tlp = lp.getOp().langpack();

		Iterable<List<? extends HasWord>> sentences;

			String sent2 = ("This is a slightly longer and more complex " +
					"sentence requiring tokenization.");
			// Use the default tokenizer for this TreebankLanguagePack
			Tokenizer<? extends HasWord> toke =
					tlp.getTokenizerFactory().getTokenizer(new StringReader(sent2));
			List<? extends HasWord> sentence2 = toke.tokenize();

			List<List<? extends HasWord>> tmp =
					new ArrayList<>();
			tmp.add(sentence2);
			sentences = tmp;
		

		for (List<? extends HasWord> sentence : sentences) {
			Tree parse = lp.parse(sentence);
//			parse.pennPrint();
//			System.out.println();
//			GrammaticalStructure gs = gsf.newGrammaticalStructure(parse);
//			List<TypedDependency> tdl = gs.typedDependenciesCCprocessed();
//			System.out.println(tdl);
//			System.out.println();


			System.out.println();
			System.out.println(parse.taggedYield());
			System.out.println();

		}

		// This method turns the String into a single sentence using the
		// default tokenizer for the TreebankLanguagePack.
//		String sent3 = "This is one last test!";
//		lp.parse(sent3).pennPrint();
	}

	private ParserDemo2() {} // static methods only

}
